Microsoft (R) Macro Assembler Version 14.38.33130.0	    12/17/24 08:54:16
out.asm							     Page 1 - 1


				.586
				.model flat, stdcall
				includelib libucrt.lib
				includelib kernel32.lib
				includelib "../Debug/StaticLibrary.lib
				ExitProcess PROTO:DWORD 
				.stack 4096


				 outlich PROTO : DWORD

				 outrad PROTO : DWORD

				 concat PROTO : DWORD, : DWORD, : DWORD

				 poww PROTO : DWORD, : DWORD, : DWORD

				 compare PROTO : DWORD, : DWORD, : DWORD

				 rnd PROTO : DWORD, : DWORD, : DWORD

				 slength PROTO : DWORD, : DWORD

				 atoii  PROTO : DWORD,  : DWORD

				 copystr PROTO : DWORD, : DWORD

 00000000			.const
 00000000 0D 0A 00				newline byte 13, 10, 0
 00000003 52 65 73 75 6C			LTRL1 byte 'Result: ', 0
	   74 3A 20 00
 0000000C 4E 75 6D 62 65			LTRL2 byte 'Number at sixteen format: ', 0
	   72 20 61 74 20
	   73 69 78 74 65
	   65 6E 20 66 6F
	   72 6D 61 74 3A
	   20 00
 00000027 0000004A				LTRL3 sdword 74
 0000002B 2D 2D 2D 2D 2D			LTRL4 byte '----------------------', 0
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 00
 00000042 00000002				LTRL5 sdword 2
 00000046 00000004				LTRL6 sdword 4
 0000004A FFFFFFFC				LTRL7 sdword -4
 0000004E 72 65 73 75 6C			LTRL8 byte 'result of division: ', 0
	   74 20 6F 66 20
	   64 69 76 69 73
	   69 6F 6E 3A 20
	   00
 00000063 28 00					LTRL9 byte '(', 0
 00000065 3E 3D 00				LTRL10 byte '>=', 0
 00000068 29 20 3A 00				LTRL11 byte ') :', 0
 0000006C 54 72 75 65 00			LTRL12 byte 'True', 0
 00000071 46 61 6C 73 65			LTRL13 byte 'False', 0
	   00
 00000077 43 6F 70 69 74			LTRL14 byte 'Copited string: ', 0
	   65 64 20 73 74
	   72 69 6E 67 3A
	   20 00
 00000088 44 65 6E 69 73			LTRL15 byte 'Denis', 0
	   00
 0000008E 48 00					LTRL16 byte 'H', 0
 00000090 69 00					LTRL17 byte 'i', 0
 00000092 21 00					LTRL18 byte '!', 0
 00000094 43 6F 6D 70 61			LTRL19 byte 'Compare: ', 0
	   72 65 3A 20 00
 0000009E 00000001				LTRL20 sdword 1
 000000A2 54 68 65 20 6C			LTRL21 byte 'The lines are the same', 0
	   69 6E 65 73 20
	   61 72 65 20 74
	   68 65 20 73 61
	   6D 65 00
 000000B9 54 68 65 20 6C			LTRL22 byte 'The lines are not the same', 0
	   69 6E 65 73 20
	   61 72 65 20 6E
	   6F 74 20 74 68
	   65 20 73 61 6D
	   65 00
 000000D4 45 78 70 6F 6E			LTRL23 byte 'Exponentiation of a number: ', 0
	   65 6E 74 69 61
	   74 69 6F 6E 20
	   6F 66 20 61 20
	   6E 75 6D 62 65
	   72 3A 20 00
 000000F1 00000006				LTRL24 sdword 6
 000000F5 52 61 6E 64 6F			LTRL25 byte 'Random number: ', 0
	   6D 20 6E 75 6D
	   62 65 72 3A 20
	   00
 00000105 0000000A				LTRL26 sdword 10
 00000109 00000005				LTRL27 sdword 5
 0000010D 00000007				LTRL28 sdword 7
 00000111 41 72 69 74 68			LTRL29 byte 'Arithmetic expression:  ', 0
	   6D 65 74 69 63
	   20 65 78 70 72
	   65 73 73 69 6F
	   6E 3A 20 20 00
 0000012A 00000008				LTRL30 sdword 8
 0000012E 31 32 33 00				LTRL31 byte '123', 0
 00000132 43 6F 6E 76 65			LTRL32 byte 'Converting a string to a number: ', 0
	   72 74 69 6E 67
	   20 61 20 73 74
	   72 69 6E 67 20
	   74 6F 20 61 20
	   6E 75 6D 62 65
	   72 3A 20 00
 00000154 49 20 6C 6F 76			LTRL33 byte 'I love SE', 0
	   65 20 53 45 00
 0000015E 4C 69 6E 65 20			LTRL34 byte 'Line length: ', 0
	   6C 65 6E 67 74
	   68 3A 20 00
 0000016C 00000036				LTRL35 sdword 54
 00000170 00000003				LTRL36 sdword 3
 00000174 52 65 6D 61 69			LTRL37 byte 'Remainder after division 54 by 3: ', 0
	   6E 64 65 72 20
	   61 66 74 65 72
	   20 64 69 76 69
	   73 69 6F 6E 20
	   35 34 20 62 79
	   20 33 3A 20 00
 00000197 4E 75 6D 62 65			LTRL38 byte 'Number after shifted to the left : ', 0
	   72 20 61 66 74
	   65 72 20 73 68
	   69 66 74 65 64
	   20 74 6F 20 74
	   68 65 20 6C 65
	   66 74 20 3A 20
	   00
 000001BB 44 65 6E 69 73			LTRL39 byte 'Denis ', 0
	   20 00
 000001C2 4D 61 6D 6F 6E			LTRL40 byte 'Mamonko', 0
	   6B 6F 00
 000001CA 45 72 72 6F 72			LTRL41 byte 'Error', 0
	   00
 000001D0 43 79 63 6C 65			LTRL42 byte 'Cycle from 2 to 10: ', 0
	   20 66 72 6F 6D
	   20 32 20 74 6F
	   20 31 30 3A 20
	   00
 000001E5 20 00					LTRL43 byte ' ', 0
 00000000			.data
 00000000 00000000				temp sdword ?
 00000004  00000100 [				buffer byte 256 dup(0)
	    00
	   ]
 00000104 00000000				minres dword 0
 00000108 00000000				standstr dword ?
 0000010C 00000000				mainsix dword 0
 00000110 00000000				mainstr dword ?
 00000114 00000000				mainabc dword 0
 00000118 00000000				mainabcd dword 0
 0000011C 00000000				mainf dword 0
 00000120 00000000				mains dword 0
 00000124 00000000				mainfinish dword 0
 00000128 00000000				standstroka dword ?
 0000012C 00000000				standstrochka dword ?
 00000130 00000000				standmh dword ?
 00000134 00000000				standmi dword ?
 00000138 00000000				standmiv dword ?
 0000013C 00000000				standdsa dword ?
 00000140 00000000				standytr dword ?
 00000144 00000000				standasd dword 0
 00000148 00000000				standp dword 0
 0000014C 00000000				standx dword 0
 00000150 00000000				standu dword 0
 00000154 00000000				standv dword 0
 00000158 00000000				standr dword 0
 0000015C 00000000				standc dword ?
 00000160 00000000				stande dword 0
 00000164 00000000				standk dword 0
 00000168 00000000				standlen dword ?
 0000016C 00000000				standnumb dword 0
 00000170 00000000				standremainder dword 0
 00000174 00000000				standresult dword 0
 00000178 00000000				standsdv dword 0
 0000017C 00000000				standname dword ?
 00000180 00000000				standsurname dword ?
 00000184 00000000				standpoi dword 0
 00000188 00000000				standisi dword 0
 0000018C 00000000				standab dword 0
 00000000			.code

				;----------- min ------------
 00000000			min PROC,
					minx : sdword, miny : sdword  
				; --- save registers ---
 00000003  53			push ebx
 00000004  52			push edx
				; ----------------------
 00000005  8B 55 08		mov edx, minx
 00000008  3B 55 0C		cmp edx, miny

 0000000B  7F 02		jg right1
 0000000D  7C 0C		jl wrong1
 0000000F			right1:
 0000000F  FF 75 08		push minx

 00000012  5B			pop ebx
 00000013  89 1D 00000104 R	mov minres, ebx

 00000019  EB 0A		jmp next1
 0000001B			wrong1:
 0000001B  FF 75 0C		push miny

 0000001E  5B			pop ebx
 0000001F  89 1D 00000104 R	mov minres, ebx

 00000025			next1:
				; --- restore registers ---
 00000025  5A			pop edx
 00000026  5B			pop ebx
				; -------------------------
 00000027  A1 00000104 R	mov eax, minres
				ret
 00000030			min ENDP
				;------------------------------


				;----------- stand ------------
 00000030			stand PROC,
					standa : dword, standb : dword  
				; --- save registers ---
 00000033  53			push ebx
 00000034  52			push edx
				; ----------------------

 00000035  FF 75 0C		push standb
 00000038  FF 75 08		push standa
 0000003B  68 00000004 R	push offset buffer
 00000040  E8 00000000 E	call concat
 00000045  A3 00000108 R	mov standstr, eax

 0000004A  68 00000003 R	push offset LTRL1
 0000004F  E8 00000000 E	call outrad


 00000054  FF 35 00000108 R	push standstr
 0000005A  E8 00000000 E	call outrad

 0000005F  68 00000000 R	push offset newline
 00000064  E8 00000000 E	call outrad

				; --- restore registers ---
 00000069  5A			pop edx
 0000006A  5B			pop ebx
				; -------------------------
				ret
 0000006F			stand ENDP
				;------------------------------


				;----------- MAIN ------------
 0000006F			main PROC

 0000006F  68 0000000C R	push offset LTRL2
 00000074  E8 00000000 E	call outrad

 00000079  FF 35 00000027 R	push LTRL3

 0000007F  5B			pop ebx
 00000080  89 1D 0000010C R	mov mainsix, ebx


 00000086  FF 35 0000010C R	push mainsix
 0000008C  E8 00000000 E	call outlich

 00000091  68 00000000 R	push offset newline
 00000096  E8 00000000 E	call outrad


 0000009B  68 0000002B R	push offset LTRL4
 000000A0  E8 00000000 E	call outrad

 000000A5  68 00000000 R	push offset newline
 000000AA  E8 00000000 E	call outrad

 000000AF  FF 35 00000042 R	push LTRL5

 000000B5  5B			pop ebx
 000000B6  89 1D 00000114 R	mov mainabc, ebx

 000000BC  FF 35 00000046 R	push LTRL6

 000000C2  5B			pop ebx
 000000C3  89 1D 00000118 R	mov mainabcd, ebx

 000000C9  FF 35 0000004A R	push LTRL7

 000000CF  5B			pop ebx
 000000D0  89 1D 0000011C R	mov mainf, ebx

 000000D6  FF 35 00000042 R	push LTRL5

 000000DC  5B			pop ebx
 000000DD  89 1D 00000120 R	mov mains, ebx

 000000E3  FF 35 0000011C R	push mainf
 000000E9  FF 35 00000120 R	push mains
 000000EF  5B			pop ebx
 000000F0  58			pop eax
 000000F1  99			cdq
 000000F2  F7 FB		idiv ebx
 000000F4  50			push eax

 000000F5  5B			pop ebx
 000000F6  89 1D 00000124 R	mov mainfinish, ebx


 000000FC  68 0000004E R	push offset LTRL8
 00000101  E8 00000000 E	call outrad


 00000106  FF 35 00000124 R	push mainfinish
 0000010C  E8 00000000 E	call outlich

 00000111  68 00000000 R	push offset newline
 00000116  E8 00000000 E	call outrad


 0000011B  68 0000002B R	push offset LTRL4
 00000120  E8 00000000 E	call outrad

 00000125  68 00000000 R	push offset newline
 0000012A  E8 00000000 E	call outrad


 0000012F  68 00000063 R	push offset LTRL9
 00000134  E8 00000000 E	call outrad


 00000139  FF 35 00000114 R	push mainabc
 0000013F  E8 00000000 E	call outlich


 00000144  68 00000065 R	push offset LTRL10
 00000149  E8 00000000 E	call outrad


 0000014E  FF 35 00000118 R	push mainabcd
 00000154  E8 00000000 E	call outlich


 00000159  68 00000068 R	push offset LTRL11
 0000015E  E8 00000000 E	call outrad

 00000163  8B 15 00000114 R	mov edx, mainabc
 00000169  3B 15 00000118 R	cmp edx, mainabcd

 0000016F  74 04		jz right2
 00000171  7F 02		jg right2
 00000173  75 0C		jnz wrong2
 00000175			right2:
 00000175  C7 05 00000108 R	mov standstr, offset LTRL12
	   0000006C R
 0000017F  EB 0A		jmp next2
 00000181			wrong2:
 00000181  C7 05 00000108 R	mov standstr, offset LTRL13
	   00000071 R
 0000018B			next2:

 0000018B  FF 35 00000108 R	push standstr
 00000191  E8 00000000 E	call outrad

 00000196  68 00000000 R	push offset newline
 0000019B  E8 00000000 E	call outrad


 000001A0  68 0000002B R	push offset LTRL4
 000001A5  E8 00000000 E	call outrad

 000001AA  68 00000000 R	push offset newline
 000001AF  E8 00000000 E	call outrad


 000001B4  68 00000077 R	push offset LTRL14
 000001B9  E8 00000000 E	call outrad

 000001BE  C7 05 00000128 R	mov standstroka, offset LTRL15
	   00000088 R

 000001C8  FF 35 00000128 R	push standstroka
 000001CE  E8 00000000 E	call outrad

 000001D3  68 00000000 R	push offset newline
 000001D8  E8 00000000 E	call outrad


 000001DD  FF 35 00000128 R	push standstroka
 000001E3  68 00000004 R	push offset buffer
 000001E8  E8 00000000 E	call copystr
 000001ED  A3 0000012C R	mov standstrochka, eax

 000001F2  68 0000002B R	push offset LTRL4
 000001F7  E8 00000000 E	call outrad

 000001FC  68 00000000 R	push offset newline
 00000201  E8 00000000 E	call outrad

 00000206  C7 05 00000130 R	mov standmh, offset LTRL16
	   0000008E R
 00000210  C7 05 00000134 R	mov standmi, offset LTRL17
	   00000090 R
 0000021A  C7 05 00000138 R	mov standmiv, offset LTRL18
	   00000092 R

 00000224  FF 35 00000130 R	push standmh
 0000022A  E8 00000000 E	call outrad


 0000022F  FF 35 00000134 R	push standmi
 00000235  E8 00000000 E	call outrad


 0000023A  FF 35 00000138 R	push standmiv
 00000240  E8 00000000 E	call outrad

 00000245  68 00000000 R	push offset newline
 0000024A  E8 00000000 E	call outrad


 0000024F  68 0000002B R	push offset LTRL4
 00000254  E8 00000000 E	call outrad

 00000259  68 00000000 R	push offset newline
 0000025E  E8 00000000 E	call outrad

 00000263  C7 05 0000013C R	mov standdsa, offset LTRL13
	   00000071 R
 0000026D  C7 05 00000140 R	mov standytr, offset LTRL13
	   00000071 R

 00000277  68 00000094 R	push offset LTRL19
 0000027C  E8 00000000 E	call outrad


 00000281  FF 35 00000140 R	push standytr
 00000287  FF 35 0000013C R	push standdsa
 0000028D  68 00000004 R	push offset buffer
 00000292  E8 00000000 E	call compare
 00000297  50			push eax

 00000298  5B			pop ebx
 00000299  89 1D 00000144 R	mov standasd, ebx

 0000029F  8B 15 00000144 R	mov edx, standasd
 000002A5  3B 15 0000009E R	cmp edx, LTRL20

 000002AB  74 02		jz right3
 000002AD  75 0C		jnz wrong3
 000002AF			right3:

 000002AF  68 000000A2 R	push offset LTRL21
 000002B4  E8 00000000 E	call outrad

 000002B9  EB 0A		jmp next3
 000002BB			wrong3:

 000002BB  68 000000B9 R	push offset LTRL22
 000002C0  E8 00000000 E	call outrad

 000002C5			next3:
 000002C5  68 00000000 R	push offset newline
 000002CA  E8 00000000 E	call outrad


 000002CF  68 0000002B R	push offset LTRL4
 000002D4  E8 00000000 E	call outrad

 000002D9  68 00000000 R	push offset newline
 000002DE  E8 00000000 E	call outrad


 000002E3  68 000000D4 R	push offset LTRL23
 000002E8  E8 00000000 E	call outrad

 000002ED  FF 35 000000F1 R	push LTRL24

 000002F3  5B			pop ebx
 000002F4  89 1D 00000148 R	mov standp, ebx


 000002FA  FF 35 00000148 R	push standp
 00000300  FF 35 00000042 R	push LTRL5
 00000306  68 00000004 R	push offset buffer
 0000030B  E8 00000000 E	call poww
 00000310  50			push eax

 00000311  5B			pop ebx
 00000312  89 1D 00000148 R	mov standp, ebx


 00000318  FF 35 00000148 R	push standp
 0000031E  E8 00000000 E	call outlich

 00000323  68 00000000 R	push offset newline
 00000328  E8 00000000 E	call outrad


 0000032D  68 0000002B R	push offset LTRL4
 00000332  E8 00000000 E	call outrad

 00000337  68 00000000 R	push offset newline
 0000033C  E8 00000000 E	call outrad


 00000341  68 000000F5 R	push offset LTRL25
 00000346  E8 00000000 E	call outrad


 0000034B  FF 35 00000105 R	push LTRL26
 00000351  FF 35 0000009E R	push LTRL20
 00000357  68 00000004 R	push offset buffer
 0000035C  E8 00000000 E	call rnd
 00000361  50			push eax

 00000362  5B			pop ebx
 00000363  89 1D 0000014C R	mov standx, ebx


 00000369  FF 35 0000014C R	push standx
 0000036F  E8 00000000 E	call outlich

 00000374  68 00000000 R	push offset newline
 00000379  E8 00000000 E	call outrad


 0000037E  68 0000002B R	push offset LTRL4
 00000383  E8 00000000 E	call outrad

 00000388  68 00000000 R	push offset newline
 0000038D  E8 00000000 E	call outrad

 00000392  FF 35 00000109 R	push LTRL27

 00000398  5B			pop ebx
 00000399  89 1D 00000150 R	mov standu, ebx

 0000039F  FF 35 0000010D R	push LTRL28

 000003A5  5B			pop ebx
 000003A6  89 1D 00000154 R	mov standv, ebx


 000003AC  68 00000111 R	push offset LTRL29
 000003B1  E8 00000000 E	call outrad

 000003B6  FF 35 00000150 R	push standu
 000003BC  FF 35 00000154 R	push standv
 000003C2  FF 35 00000042 R	push LTRL5
 000003C8  5B			pop ebx
 000003C9  58			pop eax
 000003CA  0F AF C3		imul eax, ebx
 000003CD  50			push eax
 000003CE  5B			pop ebx
 000003CF  58			pop eax
 000003D0  03 C3		add eax, ebx
 000003D2  50			push eax
 000003D3  FF 35 00000046 R	push LTRL6
 000003D9  FF 35 00000046 R	push LTRL6
 000003DF  5B			pop ebx
 000003E0  58			pop eax
 000003E1  03 C3		add eax, ebx
 000003E3  50			push eax
 000003E4  FF 35 00000042 R	push LTRL5
 000003EA  5B			pop ebx
 000003EB  58			pop eax
 000003EC  99			cdq
 000003ED  F7 FB		idiv ebx
 000003EF  50			push eax
 000003F0  5B			pop ebx
 000003F1  58			pop eax
 000003F2  2B C3		sub eax, ebx
 000003F4  73 02		jnc bk
 000003F6  F7 D8		neg eax
 000003F8			bk: 
 000003F8  50			push eax

 000003F9  FF 35 0000012A R	push LTRL30
 000003FF  FF 35 00000109 R	push LTRL27
 00000405  E8 FFFFFBF6		call min
 0000040A  50			push eax
 0000040B  5B			pop ebx
 0000040C  58			pop eax
 0000040D  03 C3		add eax, ebx
 0000040F  50			push eax

 00000410  5B			pop ebx
 00000411  89 1D 00000158 R	mov standr, ebx


 00000417  FF 35 00000158 R	push standr
 0000041D  E8 00000000 E	call outlich

 00000422  68 00000000 R	push offset newline
 00000427  E8 00000000 E	call outrad


 0000042C  68 0000002B R	push offset LTRL4
 00000431  E8 00000000 E	call outrad

 00000436  68 00000000 R	push offset newline
 0000043B  E8 00000000 E	call outrad

 00000440  C7 05 0000015C R	mov standc, offset LTRL31
	   0000012E R

 0000044A  68 00000132 R	push offset LTRL32
 0000044F  E8 00000000 E	call outrad


 00000454  FF 35 0000015C R	push standc
 0000045A  68 00000004 R	push offset buffer
 0000045F  E8 00000000 E	call atoii
 00000464  50			push eax

 00000465  5B			pop ebx
 00000466  89 1D 00000160 R	mov stande, ebx


 0000046C  FF 35 00000160 R	push stande
 00000472  E8 00000000 E	call outlich

 00000477  68 00000000 R	push offset newline
 0000047C  E8 00000000 E	call outrad


 00000481  68 0000002B R	push offset LTRL4
 00000486  E8 00000000 E	call outrad

 0000048B  68 00000000 R	push offset newline
 00000490  E8 00000000 E	call outrad

 00000495  C7 05 00000168 R	mov standlen, offset LTRL33
	   00000154 R

 0000049F  FF 35 00000168 R	push standlen
 000004A5  68 00000004 R	push offset buffer
 000004AA  E8 00000000 E	call slength
 000004AF  50			push eax

 000004B0  5B			pop ebx
 000004B1  89 1D 00000164 R	mov standk, ebx


 000004B7  68 0000015E R	push offset LTRL34
 000004BC  E8 00000000 E	call outrad


 000004C1  FF 35 00000164 R	push standk
 000004C7  E8 00000000 E	call outlich

 000004CC  68 00000000 R	push offset newline
 000004D1  E8 00000000 E	call outrad


 000004D6  68 0000002B R	push offset LTRL4
 000004DB  E8 00000000 E	call outrad

 000004E0  68 00000000 R	push offset newline
 000004E5  E8 00000000 E	call outrad

 000004EA  FF 35 0000016C R	push LTRL35

 000004F0  5B			pop ebx
 000004F1  89 1D 0000016C R	mov standnumb, ebx

 000004F7  FF 35 0000016C R	push standnumb
 000004FD  FF 35 00000170 R	push LTRL36
 00000503  5B			pop ebx
 00000504  58			pop eax
 00000505  99			cdq
 00000506  BA 00000000		mov edx,0
 0000050B  F7 FB		idiv ebx
 0000050D  52			push edx

 0000050E  5B			pop ebx
 0000050F  89 1D 00000170 R	mov standremainder, ebx


 00000515  68 00000174 R	push offset LTRL37
 0000051A  E8 00000000 E	call outrad


 0000051F  FF 35 00000170 R	push standremainder
 00000525  E8 00000000 E	call outlich

 0000052A  68 00000000 R	push offset newline
 0000052F  E8 00000000 E	call outrad


 00000534  68 0000002B R	push offset LTRL4
 00000539  E8 00000000 E	call outrad

 0000053E  68 00000000 R	push offset newline
 00000543  E8 00000000 E	call outrad

 00000548  FF 35 00000170 R	push LTRL36

 0000054E  5B			pop ebx
 0000054F  89 1D 00000178 R	mov standsdv, ebx

 00000555  FF 35 00000178 R	push standsdv
 0000055B  FF 35 00000042 R	push LTRL5
 00000561  5B			pop ebx 
 00000562  58			pop eax 
 00000563  8A CB		mov cl, bl 
 00000565  D3 E0		shl eax, cl
 00000567  50			push eax

 00000568  5B			pop ebx
 00000569  89 1D 00000174 R	mov standresult, ebx


 0000056F  68 00000197 R	push offset LTRL38
 00000574  E8 00000000 E	call outrad


 00000579  FF 35 00000174 R	push standresult
 0000057F  E8 00000000 E	call outlich

 00000584  68 00000000 R	push offset newline
 00000589  E8 00000000 E	call outrad


 0000058E  68 0000002B R	push offset LTRL4
 00000593  E8 00000000 E	call outrad

 00000598  68 00000000 R	push offset newline
 0000059D  E8 00000000 E	call outrad

 000005A2  C7 05 0000017C R	mov standname, offset LTRL39
	   000001BB R
 000005AC  C7 05 00000180 R	mov standsurname, offset LTRL40
	   000001C2 R
 000005B6  FF 35 00000046 R	push LTRL6

 000005BC  5B			pop ebx
 000005BD  89 1D 00000184 R	mov standpoi, ebx

 000005C3  FF 35 00000046 R	push LTRL6

 000005C9  5B			pop ebx
 000005CA  89 1D 00000188 R	mov standisi, ebx

 000005D0  8B 15 00000184 R	mov edx, standpoi
 000005D6  3B 15 00000188 R	cmp edx, standisi

 000005DC  74 04		jz right4
 000005DE  7C 02		jl right4
 000005E0  75 13		jnz wrong4
 000005E2			right4:

 000005E2  FF 35 00000180 R	push standsurname
 000005E8  FF 35 0000017C R	push standname
 000005EE  E8 FFFFFA3D		call stand

 000005F3  EB 0A		jmp next4
 000005F5			wrong4:

 000005F5  68 000001CA R	push offset LTRL41
 000005FA  E8 00000000 E	call outrad

 000005FF			next4:

 000005FF  68 0000002B R	push offset LTRL4
 00000604  E8 00000000 E	call outrad

 00000609  68 00000000 R	push offset newline
 0000060E  E8 00000000 E	call outrad

 00000613  FF 35 00000042 R	push LTRL5

 00000619  5B			pop ebx
 0000061A  89 1D 0000018C R	mov standab, ebx


 00000620  68 000001D0 R	push offset LTRL42
 00000625  E8 00000000 E	call outrad

 0000062A  8B 15 0000018C R	mov edx, standab
 00000630  3B 15 00000105 R	cmp edx, LTRL26

 00000636  75 02		jnz cycle5
 00000638  EB 3B		jmp cyclenext5
 0000063A			cycle5:

 0000063A  FF 35 0000018C R	push standab
 00000640  E8 00000000 E	call outlich


 00000645  68 000001E5 R	push offset LTRL43
 0000064A  E8 00000000 E	call outrad

 0000064F  FF 35 0000018C R	push standab
 00000655  FF 35 00000042 R	push LTRL5
 0000065B  5B			pop ebx
 0000065C  58			pop eax
 0000065D  03 C3		add eax, ebx
 0000065F  50			push eax

 00000660  5B			pop ebx
 00000661  89 1D 0000018C R	mov standab, ebx

 00000667  8B 15 0000018C R	mov edx, standab
 0000066D  3B 15 00000105 R	cmp edx, LTRL26

 00000673  75 C5		jnz cycle5
 00000675			cyclenext5:

 00000675  FF 35 0000018C R	push standab
 0000067B  E8 00000000 E	call outlich

 00000680  68 00000000 R	push offset newline
 00000685  E8 00000000 E	call outrad

 0000068A  6A 00		push 0
 0000068C  E8 00000000 E	call ExitProcess
 00000691			main ENDP
				end main
Microsoft (R) Macro Assembler Version 14.38.33130.0	    12/17/24 08:54:16
out.asm							     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

CONST  . . . . . . . . . . . . .	32 Bit	 000001E7 Para	  Public  'CONST'	 ReadOnly
FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000190 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000691 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
atoii  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
compare  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
concat . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
copystr  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 0000006F _TEXT	Length= 00000622 Public STDCALL
  right2 . . . . . . . . . . . .	L Near	 00000175 _TEXT	
  wrong2 . . . . . . . . . . . .	L Near	 00000181 _TEXT	
  next2  . . . . . . . . . . . .	L Near	 0000018B _TEXT	
  right3 . . . . . . . . . . . .	L Near	 000002AF _TEXT	
  wrong3 . . . . . . . . . . . .	L Near	 000002BB _TEXT	
  next3  . . . . . . . . . . . .	L Near	 000002C5 _TEXT	
  bk . . . . . . . . . . . . . .	L Near	 000003F8 _TEXT	
  right4 . . . . . . . . . . . .	L Near	 000005E2 _TEXT	
  wrong4 . . . . . . . . . . . .	L Near	 000005F5 _TEXT	
  next4  . . . . . . . . . . . .	L Near	 000005FF _TEXT	
  cycle5 . . . . . . . . . . . .	L Near	 0000063A _TEXT	
  cyclenext5 . . . . . . . . . .	L Near	 00000675 _TEXT	
min  . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000030 Public STDCALL
  minx . . . . . . . . . . . . .	DWord	 bp + 00000008
  miny . . . . . . . . . . . . .	DWord	 bp + 0000000C
  right1 . . . . . . . . . . . .	L Near	 0000000F _TEXT	
  wrong1 . . . . . . . . . . . .	L Near	 0000001B _TEXT	
  next1  . . . . . . . . . . . .	L Near	 00000025 _TEXT	
outlich  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
outrad . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
poww . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
rnd  . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
slength  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
stand  . . . . . . . . . . . . .	P Near	 00000030 _TEXT	Length= 0000003F Public STDCALL
  standa . . . . . . . . . . . .	DWord	 bp + 00000008
  standb . . . . . . . . . . . .	DWord	 bp + 0000000C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
LTRL10 . . . . . . . . . . . . .	Byte	 00000065 CONST	
LTRL11 . . . . . . . . . . . . .	Byte	 00000068 CONST	
LTRL12 . . . . . . . . . . . . .	Byte	 0000006C CONST	
LTRL13 . . . . . . . . . . . . .	Byte	 00000071 CONST	
LTRL14 . . . . . . . . . . . . .	Byte	 00000077 CONST	
LTRL15 . . . . . . . . . . . . .	Byte	 00000088 CONST	
LTRL16 . . . . . . . . . . . . .	Byte	 0000008E CONST	
LTRL17 . . . . . . . . . . . . .	Byte	 00000090 CONST	
LTRL18 . . . . . . . . . . . . .	Byte	 00000092 CONST	
LTRL19 . . . . . . . . . . . . .	Byte	 00000094 CONST	
LTRL1  . . . . . . . . . . . . .	Byte	 00000003 CONST	
LTRL20 . . . . . . . . . . . . .	DWord	 0000009E CONST	
LTRL21 . . . . . . . . . . . . .	Byte	 000000A2 CONST	
LTRL22 . . . . . . . . . . . . .	Byte	 000000B9 CONST	
LTRL23 . . . . . . . . . . . . .	Byte	 000000D4 CONST	
LTRL24 . . . . . . . . . . . . .	DWord	 000000F1 CONST	
LTRL25 . . . . . . . . . . . . .	Byte	 000000F5 CONST	
LTRL26 . . . . . . . . . . . . .	DWord	 00000105 CONST	
LTRL27 . . . . . . . . . . . . .	DWord	 00000109 CONST	
LTRL28 . . . . . . . . . . . . .	DWord	 0000010D CONST	
LTRL29 . . . . . . . . . . . . .	Byte	 00000111 CONST	
LTRL2  . . . . . . . . . . . . .	Byte	 0000000C CONST	
LTRL30 . . . . . . . . . . . . .	DWord	 0000012A CONST	
LTRL31 . . . . . . . . . . . . .	Byte	 0000012E CONST	
LTRL32 . . . . . . . . . . . . .	Byte	 00000132 CONST	
LTRL33 . . . . . . . . . . . . .	Byte	 00000154 CONST	
LTRL34 . . . . . . . . . . . . .	Byte	 0000015E CONST	
LTRL35 . . . . . . . . . . . . .	DWord	 0000016C CONST	
LTRL36 . . . . . . . . . . . . .	DWord	 00000170 CONST	
LTRL37 . . . . . . . . . . . . .	Byte	 00000174 CONST	
LTRL38 . . . . . . . . . . . . .	Byte	 00000197 CONST	
LTRL39 . . . . . . . . . . . . .	Byte	 000001BB CONST	
LTRL3  . . . . . . . . . . . . .	DWord	 00000027 CONST	
LTRL40 . . . . . . . . . . . . .	Byte	 000001C2 CONST	
LTRL41 . . . . . . . . . . . . .	Byte	 000001CA CONST	
LTRL42 . . . . . . . . . . . . .	Byte	 000001D0 CONST	
LTRL43 . . . . . . . . . . . . .	Byte	 000001E5 CONST	
LTRL4  . . . . . . . . . . . . .	Byte	 0000002B CONST	
LTRL5  . . . . . . . . . . . . .	DWord	 00000042 CONST	
LTRL6  . . . . . . . . . . . . .	DWord	 00000046 CONST	
LTRL7  . . . . . . . . . . . . .	DWord	 0000004A CONST	
LTRL8  . . . . . . . . . . . . .	Byte	 0000004E CONST	
LTRL9  . . . . . . . . . . . . .	Byte	 00000063 CONST	
buffer . . . . . . . . . . . . .	Byte	 00000004 _DATA	
mainabcd . . . . . . . . . . . .	DWord	 00000118 _DATA	
mainabc  . . . . . . . . . . . .	DWord	 00000114 _DATA	
mainfinish . . . . . . . . . . .	DWord	 00000124 _DATA	
mainf  . . . . . . . . . . . . .	DWord	 0000011C _DATA	
mainsix  . . . . . . . . . . . .	DWord	 0000010C _DATA	
mainstr  . . . . . . . . . . . .	DWord	 00000110 _DATA	
mains  . . . . . . . . . . . . .	DWord	 00000120 _DATA	
minres . . . . . . . . . . . . .	DWord	 00000104 _DATA	
newline  . . . . . . . . . . . .	Byte	 00000000 CONST	
standab  . . . . . . . . . . . .	DWord	 0000018C _DATA	
standasd . . . . . . . . . . . .	DWord	 00000144 _DATA	
standc . . . . . . . . . . . . .	DWord	 0000015C _DATA	
standdsa . . . . . . . . . . . .	DWord	 0000013C _DATA	
stande . . . . . . . . . . . . .	DWord	 00000160 _DATA	
standisi . . . . . . . . . . . .	DWord	 00000188 _DATA	
standk . . . . . . . . . . . . .	DWord	 00000164 _DATA	
standlen . . . . . . . . . . . .	DWord	 00000168 _DATA	
standmh  . . . . . . . . . . . .	DWord	 00000130 _DATA	
standmiv . . . . . . . . . . . .	DWord	 00000138 _DATA	
standmi  . . . . . . . . . . . .	DWord	 00000134 _DATA	
standname  . . . . . . . . . . .	DWord	 0000017C _DATA	
standnumb  . . . . . . . . . . .	DWord	 0000016C _DATA	
standpoi . . . . . . . . . . . .	DWord	 00000184 _DATA	
standp . . . . . . . . . . . . .	DWord	 00000148 _DATA	
standremainder . . . . . . . . .	DWord	 00000170 _DATA	
standresult  . . . . . . . . . .	DWord	 00000174 _DATA	
standr . . . . . . . . . . . . .	DWord	 00000158 _DATA	
standsdv . . . . . . . . . . . .	DWord	 00000178 _DATA	
standstrochka  . . . . . . . . .	DWord	 0000012C _DATA	
standstroka  . . . . . . . . . .	DWord	 00000128 _DATA	
standstr . . . . . . . . . . . .	DWord	 00000108 _DATA	
standsurname . . . . . . . . . .	DWord	 00000180 _DATA	
standu . . . . . . . . . . . . .	DWord	 00000150 _DATA	
standv . . . . . . . . . . . . .	DWord	 00000154 _DATA	
standx . . . . . . . . . . . . .	DWord	 0000014C _DATA	
standytr . . . . . . . . . . . .	DWord	 00000140 _DATA	
temp . . . . . . . . . . . . . .	DWord	 00000000 _DATA	

	   0 Warnings
	   0 Errors
